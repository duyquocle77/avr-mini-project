;/*****************************************************
;Project : ACU Driver
;Date    : 31/05/2022
;Author  : Le Duy Quoc
;Company : HCMC Nong Lam University
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <stdlib.h>
;#include <stdarg.h>
;#include <delay.h>
;#include <alcd.h>
;/******************************************************************************/
;/*---------------------------------DEFINE-------------------------------------*/
;
;#define ACCELERATE_THRESHOLD    500
;#define CRASH_THRESHOLD         500
;#define VACC					5.0f
;#define ADC_VREF_TYPE           0x40
;
;#define AIRBAG_LED              PORTB.0
;#define SEATBELT_LED            PORTB.1
;#define SEATBELT                PIND.2
;#define LED						PORTB.2
;#define BUZZER					PORTA.2
;/******************************************************************************/
;/*----------------------------DECLARE FUNCTION--------------------------------*/
;/*kHOI TAO CAC KHOI NGOAI VI*/
;static inline void init_GPIO();
;static inline void init_ADC();
;static inline void init_Timer0_PWM();
;static inline void init_Timer1_PWM();
;static inline void init_ExtInt();
;static inline void init_UART();
;
;unsigned int read_adc(unsigned char adc_input);
;void airbag_employ();
;void read_Sensor();
;void print_lcd(unsigned int flag);
;/******************************************************************************/
;/*----------------------------DECLARE GLOBAL VAR------------------------------*/
;
;volatile unsigned char flag = 0;	// trang thai seatbelt
;unsigned char employ = 0;	    // trang thai tui khi
;unsigned int crash_value, accelerate_value;
;char buffer[16];
;
;/******************************************************************************/
;/*-------------------------------MAIN FUNCTION--------------------------------*/
;
;void main(void)
; 0000 003C {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 003D 	unsigned int i;
; 0000 003E     // Alphanumeric LCD initialization
; 0000 003F 	// RS - PORTC Bit 0
; 0000 0040 	// RD - PORTC Bit 1
; 0000 0041 	// EN - PORTC Bit 2
; 0000 0042 	// D4 - PORTC Bit 4
; 0000 0043 	// D5 - PORTC Bit 5
; 0000 0044 	// D6 - PORTC Bit 6
; 0000 0045 	// D7 - PORTC Bit 7
; 0000 0046 	// Characters/line: 16
; 0000 0047 
; 0000 0048 	lcd_init(16);
;	i -> R16,R17
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0049 	init_GPIO();
;PCODE: $00000011 VOL: 0
; 0000 004A 	init_ADC();
;PCODE: $00000012 VOL: 0
; 0000 004B 	init_ExtInt();
;PCODE: $00000013 VOL: 0
; 0000 004C 	init_UART();
;PCODE: $00000014 VOL: 0
; 0000 004D 
; 0000 004E 	// Global enable interrupts
; 0000 004F 	#asm("sei")
;PCODE: $00000015 VOL: 0
	sei
;PCODE: $00000016 VOL: 0
; 0000 0050 
; 0000 0051             lcd_gotoxy(2, 0);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0052             lcd_puts("supplemental");
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0053             lcd_gotoxy(0, 1);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0054             lcd_puts("restraint system");
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0055             delay_ms(1000);
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0056             for (i = 0; i <= 6; i++)
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0057             {
; 0000 0058                 AIRBAG_LED = 0;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0059                 delay_ms(100);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 005A                 AIRBAG_LED = 1;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 005B                 delay_ms(100);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 005C             }
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 005D 
; 0000 005E             lcd_clear();
;PCODE: $00000044 VOL: 0
; 0000 005F             lcd_gotoxy(0, 0);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0060             lcd_puts("Seatbelt: OFF");
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0061 
; 0000 0062 	while (1)
;PCODE: $0000004E VOL: 0
; 0000 0063 	      {
; 0000 0064             /* Doc gia tri cac cam bien */
; 0000 0065             read_Sensor();
;PCODE: $0000004F VOL: 0
; 0000 0066 
; 0000 0067             /* Khi seatbelt ON */
; 0000 0068             if(flag == 1)
;PCODE: $00000050 VOL: 1
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0069             {
; 0000 006A                 /*lcd_gotoxy(0, 0);
; 0000 006B                 lcd_puts("Seatbelt:  ON"); */
; 0000 006C 
; 0000 006D 				SEATBELT_LED = 1;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 006E 
; 0000 006F 
; 0000 0070                 /* Khi seatbelt ON va cac cam bien dat gia tri nguong kich hoat tui khi */
; 0000 0071                 if((crash_value >= CRASH_THRESHOLD) && (accelerate_value >= ACCELERATE_THRESHOLD))
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0072                 {
; 0000 0073                     airbag_employ();
;PCODE: $0000005F VOL: 0
; 0000 0074 
; 0000 0075                     lcd_gotoxy(0, 1);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0076                     lcd_puts("Airbag  Employed");
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0077 
; 0000 0078                     /*Sau khi tui khi no, gia tri cam bien thap hon nguong hoac thao seatbelt, acu van bao tui khi da no*/
; 0000 0079                     while(employ == 1)
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 007A                     {
; 0000 007B                         if(flag == 0)
;PCODE: $0000006D VOL: 1
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 007C                         {
; 0000 007D                             SEATBELT_LED = 0;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 007E                             delay_ms(1000);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 007F                             SEATBELT_LED = 1;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0080                             delay_ms(1000);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0081 
; 0000 0082                             /*lcd_gotoxy(0, 0);
; 0000 0083                             lcd_puts("Seatbelt: OFF");  */
; 0000 0084                         }
; 0000 0085                         else if(flag == 1)
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 1
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0086                         {
; 0000 0087                             SEATBELT_LED = 1;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0088                            /* lcd_gotoxy(0, 0);
; 0000 0089                             lcd_puts("Seatbelt:  ON"); */
; 0000 008A                         }
; 0000 008B 
; 0000 008C                     }
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 008D                 }
; 0000 008E 
; 0000 008F                 /* Khi seatbelt ON, nhung cac cam bien van chua dat gia tri nguong*/
; 0000 0090                 else
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0091                 {
; 0000 0092                     read_Sensor();
;PCODE: $00000087 VOL: 0
; 0000 0093                 }
;PCODE: $00000088 VOL: 0
; 0000 0094             }
; 0000 0095 
; 0000 0096             /* Khi seatbelt OFF */
; 0000 0097 
; 0000 0098             else
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0099             {
; 0000 009A                 read_Sensor();
;PCODE: $0000008B VOL: 0
; 0000 009B                 /*lcd_gotoxy(0, 0);
; 0000 009C                 lcd_puts("Seatbelt: OFF");*/
; 0000 009D 
; 0000 009E                 SEATBELT_LED = 0;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 009F                 delay_ms(1000);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00A0                 SEATBELT_LED = 1;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00A1                 delay_ms(1000);
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00A2 
; 0000 00A3                 /* Khi seatbelt OFF, cac cam bien dat gia tri nguong */
; 0000 00A4                 if((crash_value >= CRASH_THRESHOLD) && (accelerate_value >= ACCELERATE_THRESHOLD))
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00A5                 {
; 0000 00A6                     read_Sensor();
;PCODE: $000000A0 VOL: 0
; 0000 00A7                     while(PIND.2 == 0)
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00A8                     {
; 0000 00A9                         read_Sensor();
;PCODE: $000000A5 VOL: 0
; 0000 00AA                         /*lcd_gotoxy(0, 0);
; 0000 00AB                         lcd_puts("Seatbelt: OFF");*/
; 0000 00AC                     }
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00AD                 }
; 0000 00AE                 /* Khi seatbelt OFF, gia tri cac cam bien thap hon nguong */
; 0000 00AF                 else
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00B0                 {
; 0000 00B1                     read_Sensor();
;PCODE: $000000AA VOL: 0
; 0000 00B2                 }
;PCODE: $000000AB VOL: 0
; 0000 00B3             }
;PCODE: $000000AC VOL: 0
; 0000 00B4 	      }
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00B5 }
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0

	.DSEG
_0x3:
	.BYTE 0x3D
;
;/******************************************************************************/
;/*-------------------------INTERRUPT SERVICE ROUTINE--------------------------*/
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 00BC {

	.CSEG
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00BD     //delay_ms(200);
; 0000 00BE     flag = 1 - flag;
;PCODE: $000000B4 VOL: 1
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 1
; 0000 00BF     print_lcd(flag);
;PCODE: $000000BA VOL: 1
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00C0 
; 0000 00C1     LED = 0;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00C2     delay_ms(20);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00C3     LED = 1;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00C4 }
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;
;/******************************************************************************/
;/*---------------------------DEFINITION FUNCTION------------------------------*/
;
;static inline void init_GPIO()
; 0000 00CA {
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00CB 	// Input/Output Ports initialization
; 0000 00CC 	PORTA = (1<<2);
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00CD 	DDRA  = (1<<2);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00CE 
; 0000 00CF 	PORTB = (1<<PORTB0)|(1<<PORTB1)|(1<<PORTB2);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00D0 	DDRB  = 0xFF;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00D1 
; 0000 00D2 	PORTC = 0x00;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00D3 	DDRC  = 0xFF;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00D4 
; 0000 00D5 	PORTD = 0x00;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00D6 	DDRD  = (1<<DDD4)|(1<<DDD5);
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00D7 }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;
;static inline void init_ADC()
; 0000 00DA {
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00DB 	// ADC initialization
; 0000 00DC 
; 0000 00DD 	/* ADC Voltage Reference: AVCC pin*/
; 0000 00DE 	ADMUX = ADC_VREF_TYPE & 0xff;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00DF     /*ADC Enable, Pre-scaler 8: 1.000.000 kHz*/
; 0000 00E0 	ADCSRA = (1<<ADEN)|(1<<ADATE)|(1<<ADPS0)|(1<<ADPS2);
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00E1     /*Free Running mode*/
; 0000 00E2 	SFIOR &= 0x00;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00E3 }
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;
;static inline void init_Timer0_PWM()
; 0000 00E6 {
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00E7 	/*
; 0000 00E8 		duty cycle = OCR/256
; 0000 00E9 		T=256*(Tclk_cpu/prescaler)
; 0000 00EA 	*/
; 0000 00EB 
; 0000 00EC 	// Timer/Counter 0 initialization
; 0000 00ED 	/*Fast PWM mode, top=0xFF, OC0 output: non-inverted, no-prescaler */
; 0000 00EE 	TCCR0 = (1<<WGM00)|(1<<WGM01);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00EF 	TCNT0 = 0x00;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00F0 	OCR0  = 127;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00F1 
; 0000 00F2 	// Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00F3 	TIMSK=0x00;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00F4 }
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;
;
;static inline void init_Timer1_PWM()
; 0000 00F8 {
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00F9 	/*
; 0000 00FA 		duty cycle = OCR/256
; 0000 00FB 		T=256*(Tclk_cpu/prescaler)
; 0000 00FC 	*/
; 0000 00FD 
; 0000 00FE 	// Timer/Counter 1 initialization
; 0000 00FF 	/*Fast PWM mode, top=0x3FF, OC1A-OC1B output: non-inverted, no-prescaler */
; 0000 0100 	TCCR1A = (1<<COM1A1)|(1<<COM1B1)|(1<<WGM11)|(1<<WGM10);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0101 	TCCR1B = (1<<WGM12)|(1<<CS10);
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0102 	TCNT1H = 0x00;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0103 	TCNT1L = 0x00;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0104 	ICR1H  = 0x00;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 0105 	ICR1L  = 0x00;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0106 
; 0000 0107 	OCR1A = 10;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0108 	OCR1B = 10;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0109 
; 0000 010A 	// Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 010B 	TIMSK=0x00;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 010C }
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;
;static inline void init_ExtInt()
; 0000 010F {
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0110 	// External Interrupt(s) initialization
; 0000 0111 	/*INT0 Enable*/
; 0000 0112 	GICR  |= (1<<INT0);
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 0113 	/*falling Mode*/
; 0000 0114 	MCUCR  = (1 << ISC01);
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 0115 	MCUCSR = 0x00;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0116 	GIFR   = (1<<INTF0);
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 0117 }
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;
;static inline void init_UART()
; 0000 011A {
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 011B 	// USART initialization
; 0000 011C 	// Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 011D 	// USART Receiver: On
; 0000 011E 	// USART Transmitter: On
; 0000 011F 	// USART Mode: Asynchronous
; 0000 0120 	// USART Baud Rate: 9600
; 0000 0121 	UCSRA=0x00;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 0122 	UCSRB=0x18;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0123 	UCSRC=0x86;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 0124 	UBRRH=0x00;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0125 	UBRRL=0x33;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0126 }
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;
;/******************************************************************************/
;/*
;float ADC_to_Voltage(unsigned int adc_value)
;{
;	// ADC 10-bit
;	float voltage = 0.0;
;	voltage = VACC * adc_value / 1024;
;
;	return voltage;
;}*/
;
;unsigned int read_adc(unsigned char adc_input)
; 0000 0134 {
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0135 	ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0136 	// Delay needed for the stabilization of the ADC input voltage
; 0000 0137 	delay_us(10);
;PCODE: $00000129 VOL: 0
; 0000 0138 	// Start the AD conversion
; 0000 0139 	ADCSRA|=0x40;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 013A 	// Wait for the AD conversion to complete
; 0000 013B 	while ((ADCSRA & 0x10)==0);
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 013C 	ADCSRA|=0x10;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 013D 	return ADCW;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 013E }
;PCODE: $00000137 VOL: 0
;
;void airbag_employ()
; 0000 0141 {
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0142 	AIRBAG_LED = 0;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0143     BUZZER = 0;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0144     init_Timer0_PWM();	// xung tui khi da no
;PCODE: $0000013E VOL: 0
; 0000 0145     init_Timer1_PWM();  // xung tin hieu tai nan gui ve hop BCM
;PCODE: $0000013F VOL: 0
; 0000 0146     employ = 1;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0147 }
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;
;void read_Sensor()
; 0000 014A {
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 014B     crash_value = read_adc(0);
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 014C     accelerate_value = read_adc(1);
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 014D     //printf("impact: %d     accelerate: %d\n\r",crash_value, accelerate_value);
; 0000 014E     sprintf(buffer,"ss1:%4dss2:%4d\n\r", crash_value, accelerate_value);
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 014F     printf("%s\n\r",buffer);
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 0150     lcd_gotoxy(0,1);
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 0151     lcd_puts(buffer);
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0152 }
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;
;void print_lcd(unsigned int flag)
; 0000 0155 {
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0156     if(flag == 1)
;	flag -> Y+0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0157     {
; 0000 0158         //lcd_clear();
; 0000 0159         lcd_gotoxy(0, 0);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 015A         lcd_puts("Seatbelt:  ON");
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 015B     }
; 0000 015C     else if(flag == 0)
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 015D     {
; 0000 015E         //lcd_clear();
; 0000 015F         lcd_gotoxy(0, 0);
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 0160         lcd_puts("Seatbelt: OFF");
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 0161     }
; 0000 0162 }
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0

	.DSEG
_0x3A:
	.BYTE 0x1C
